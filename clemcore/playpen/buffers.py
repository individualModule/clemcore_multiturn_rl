from typing import List, Dict
import random
import warnings

from clemcore.clemgame import Player
from clemcore.playpen.envs.game_env import GameEnv
from clemcore.playpen.envs.branching_env import GameBranchingEnv


class RolloutBuffer:

    def __init__(self, game_env):
        self.game_env = game_env
        self.initial_prompts: Dict[Player, Dict] = {}  # initial prompts that are not given in the initial context

    def on_step(self, context, response, done, info):
        pass

    def on_done(self):
        pass

    def reset(self):
        pass

    def get_perspective_of(self, player: Player):
        pass  # todo


class StepRolloutBuffer(RolloutBuffer):
    """ This buffer can collect the trajectories generated by a game env """

    def __init__(self, game_env: GameEnv):
        assert isinstance(game_env, GameEnv), "StepRolloutBuffer can only be used with GameEnv"
        super().__init__(game_env)
        self.trajectories: List = None
        self.current_trajectory: int = None
        self.reset()

    def on_step(self, context, response, done, info):
        step = dict(context=context, response=response, done=done, info=info)
        self.trajectories[self.current_trajectory].append(step)

    def on_done(self):
        self.trajectories.append([])
        self.current_trajectory += 1

    def reset(self):
        self.trajectories = [[]]
        self.current_trajectory = 0

    def sample_trajectories(self):
        return self.trajectories

class BranchingRolloutBuffer(RolloutBuffer):
    """ This buffer can collect the trajectories generated by the branching env """

    def __init__(self, game_env: GameBranchingEnv):
        assert isinstance(game_env, GameBranchingEnv), "TreeRolloutBuffer can only be used with GameBranchingEnv"
        super().__init__(game_env)
        self.forest: List = None
        self.reset()

    def on_done(self):
        active_tree = self.game_env.get_active_tree()
        self.forest.append(active_tree)

    def reset(self):
        self.forest = []


class ReplayBuffer(StepRolloutBuffer):
    """Replay buffer with a fixed size that removes the oldest samples when full."""

    def __init__(self, game_env: GameEnv, buffer_size: int, sample_size: int):
        """
        buffer size defines trajectories currently. Should it define steps/
        """
        super().__init__(game_env)
        self.buffer_size = buffer_size
        self.sample_size = sample_size

    def on_done(self):
        """Add the current trajectory to the buffer and enforce buffer size."""
        super().on_done()
        # Remove the oldest trajectories if the buffer exceeds its size
        excess_count = len(self.trajectories) - self.buffer_size
        if excess_count > 0:
            self.trajectories = self.trajectories[excess_count:]  # Keep only the most recent trajectories

    def sample(self, sample_size: int):
        """Randomly sample trajectories from the buffer."""
        if len(self.trajectories) < sample_size:
            warnings.warn(
                f"Requested sample size ({sample_size}) is larger than the number of stored trajectories "
                f"({len(self.trajectories)}). Returning all available trajectories."
            )
            return self.trajectories
        return random.sample(self.trajectories, sample_size)

    def sample_trajectories(self):
        """Return a random sample of trajectories."""
        return self.sample(self.sample_size)